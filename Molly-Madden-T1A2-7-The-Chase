require 'tty-prompt'
require 'timers'

timers = Timers::Group.new

@prompt = TTY::Prompt.new



chasers = ["The Beast", "The Shark", "The Governess", "Goliath", "The SuperNerd"]

speed_questions = [
one = {"how many sides -not counting the bottom- does the great pyramid of Egypt have?" => "8"},
two = {"what year did Marty and Doc travel to in Back to the Future part two?" => "2015"},
three = {"how many dots are there on two dice?" => "42"},
four = {"how many squares are there on a chess board?" => "64"},
five = {"what year did Elvis Presley die?" => "1977"},
six = {"how many bones are in the human body?" => "206"},
seven = {"what number president was Barack Obama?" => "44"},
eight = {"true or false - Australia is the world's largest island?" => "true"},
nine = {"what year did Sydney host the olympic games?" => "1956"},
ten = {"true or false - green is a primary colour" => "false"},
eleven = {"at what age is a wizard admitted to Hogwarts?" => "11"},
twelve = {"how many valves does a trumpet have?" => "3"},
thirteen = {"what number planet is uranus from the sun?" => "7"},
fourteen = {"in miles - what is the diameter of planet earth?" => "8000"},
fifteen = {"how many Lord of the Rings movies did Peter Jackson direct?" => "3"}
]

five_second_timer = timers.after(5)


puts "what is your name?"
print "> "

player = gets.chomp

puts "Welcome to the Chase #{player}! lets start the speed round! each correct question is worth $2000."
# *thinking*
# *scary music*

puts speed_questions.sample

# offers = [
# {high_offer => speed_dollars*3,
# low_offer => speed_dollars/5,
# speed_dollars => speed_dollars}
# ]

# puts "#{player} you have earned $#{speed_dollars}. The high off is $#{low_offer}. the low offer is $#{high_offer}. What is your choice?"

# def offers_menu
#     menu = @prompt.select("Choose your offer", offers)

# p offers_menu

# offers[0] = -5
# offers[1] = -4
# offers[2] = -3
# puts "#{player} your chaser today is #{chasers.sample}!!!"



# puts "lets start the speed round!"

# loop do
# puts speed_questions.sample
# end

# end

